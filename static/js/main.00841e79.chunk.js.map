{"version":3,"sources":["dummyData.js","TodoTableRow.js","TableRowHeader.js","App.js","serviceWorker.js","index.js","assets/001-add.svg","assets/002-minus.svg"],"names":["faker","require","generateData","data","date","i","firstName","name","lastName","push","id","random","uuid","slice","accountName","concat","amount","finance","email","hidden","TodoTableRow","props","react_default","a","createElement","className","key","todo","style","display","TableRowHeader","toggleCollapseIcon","dateCollapsed","plusSignIcon","minusSignIcon","onClick","toggleCollapsedDates","src","alt","class","colSpan","App","state","todos","uniqueDates","collapsed","sortAlphbetically","sortBy","sort","b","dataA","toUpperCase","dataB","sortByDateAscending","sortedData","_this","Date","setState","sortByDateDescending","dateA","length","updatedTodo","Object","assign","toConsumableArray","toggleCollapseDate","console","log","todoData","this","dates","tableRows","j","src_TodoTableRow","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.00841e79.chunk.js","sourcesContent":["const faker = require('faker')\n\nconst generateData = () => {\n    const data = []\n    let date = ''\n    for (let i = 0; i < 12; i++) {\n        if (i < 3) {\n            date = '3/26/2019'\n        } else if (i < 5) {\n            date = '3/31/2019'\n        } else {\n            date = '4/2/2019'\n        } \n        let firstName = faker.name.firstName()\n        let lastName = faker.name.lastName()\n        data.push({\n            date,\n            id: faker.random.uuid().slice(0, 6),\n            // account: faker.finance.accountName(), \n            accountName: `${lastName}, ${firstName}`,\n            amount: faker.finance.amount(),\n            email: `${lastName}.${firstName}@test.com`,\n            hidden: false\n        })    \n    }\n      \n    // console.log('data: ', data)\n    return data\n}\n\nexport default generateData\n\n","import React from 'react'\n\nconst TodoTableRow = (props) => {\n  const collapsed = {\n    display: 'none'\n  }\n  \n  return (\n    <tr \n      className=\"todo-table-tr\"\n      key={props.todo.id}\n      style={props.hidden ? collapsed : null}\n    >\n        <td className=\"empty-td\"></td>\n        <td>{props.todo.date}</td>\n        <td>{props.todo.id}</td>\n        <td>{props.todo.accountName}</td>\n        <td>{props.todo.email}</td>\n        <td>$ {props.todo.amount}</td>\n    </tr>\n  )\n}\n\nexport default TodoTableRow\n","import React from 'react'\nimport plusSignIcon from './assets/001-add.svg'\nimport minusSignIcon from './assets/002-minus.svg'\n\nexport default function TableRowHeader(props) {\n  const toggleCollapseIcon = props.dateCollapsed === true \n    ? plusSignIcon \n    : minusSignIcon\n\n  return (\n    <tr className={!props.dateCollapsed ? 'date-header-bgColor' : ''}>\n        <th \n          onClick={() => props.toggleCollapsedDates(props.date)}\n          className={`collapse-icon ${props.dateCollapsed ? 'date-header-bgColor' : ''}`}\n        >\n          <img \n              src={toggleCollapseIcon} \n              alt=\"Icon that toggles collapse of row group\" \n          />\n        </th>\n        <th class=\"date-header\">{props.date}</th>\n        <th colSpan=\"5\"></th>\n    </tr> \n  )\n}\n","import React, { Component } from 'react';\nimport generateData from './dummyData'\nimport TodoTableRow from './TodoTableRow'\nimport TableRowHeader from './TableRowHeader'\n// import sortIcon from './assets/sort.svg'\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    todos: [],\n    // TODO: get unique dates with Mongo and add them\n    uniqueDates: [\n      {date: '4/2/2019', collapsed: false},\n      {date: '3/26/2019', collapsed: false},\n      {date: '3/31/2019', collapsed: false}\n    ]\n  }\n  componentDidMount() {\n    const todoData = generateData()\n    const sortedData = this.sortAlphbetically(todoData, 'accountName')\n    this.setState({\n      todos: sortedData\n    }, this.sortByDateDescending())\n  }\n\n  sortAlphbetically = (data, sortBy) => {\n    const sortedData = data.sort((a, b) => {\n      const dataA = a[sortBy].toUpperCase()\n      const dataB = b[sortBy].toUpperCase()\n      if (dataA < dataB) return -1\n      else if (dataA > dataB) return 1\n      else return 0\n    })\n    return sortedData  \n  }\n\n  sortByDateAscending = () => {\n    const sortedData = this.state.uniqueDates.sort((a, b) => {\n      const dateA = new Date(a.date)\n      const dateB = new Date(b.date)\n      return dateA - dateB\n    })\n    this.setState({\n      uniqueDates: sortedData\n    })\n  }\n\n  sortByDateDescending = () => {\n    const sortedData = this.state.uniqueDates.sort((a, b) => {\n      const dateA = new Date(a.date)\n      const dateB = new Date(b.date)\n      return dateB - dateA\n    })\n    this.setState({\n      uniqueDates: sortedData\n    })\n  }\n\n  toggleCollapsedDates = date => {\n    const todos = this.state.todos\n    const uniqueDates = this.state.uniqueDates\n    \n    for (let i = 0; i < todos.length; i++) {\n      if (date === todos[i].date) {\n        const updatedTodo = Object.assign({}, todos[i], {\n          hidden: !todos[i].hidden\n        })\n        // console.log('updatedTodo: ', updatedTodo)\n        this.setState({\n          todos: [ \n            ...todos.slice(0, i), \n            updatedTodo,\n            ...todos.slice(i + 1)\n          ]\n        })\n      }\n    }\n    \n    for (let i = 0; i < uniqueDates.length; i++) {\n      if (date === uniqueDates[i].date) {\n        const toggleCollapseDate = Object.assign({}, uniqueDates[i], {\n          collapsed: !uniqueDates[i].collapsed\n        })\n        console.log('toggleCollapseDate: ', toggleCollapseDate)\n        this.setState({\n          uniqueDates: [\n            ...uniqueDates.slice(0, i),\n            toggleCollapseDate,\n            ...uniqueDates.slice(i + 1)\n          ]\n        })\n      }\n    }\n  }\n\n  render() {\n    console.log('State: ', this.state)\n    const todos = this.state.todos\n    const dates = this.state.uniqueDates\n\n    let tableRows = []\n    for (let i = 0; i < dates.length; i++) {\n      for (let j = 0; j < todos.length + 1; j++) {\n        // render blank row for date group header\n        if (j === 0) {\n          tableRows.push(\n            <TableRowHeader \n              date={dates[i].date} \n              toggleCollapsedDates={this.toggleCollapsedDates}\n              key={dates[i].date}\n              dateCollapsed={dates[i].collapsed}\n            />\n          )\n        } \n        // render the rows with data. `[j - 1]` is necessary since we're looping over the array length + 1 to account for the containing/blankish <th> row above\n        else if (todos[j - 1].date === dates[i].date) { \n          tableRows.push(\n            <TodoTableRow \n              todo={todos[j - 1]}\n              key={todos[j - 1].id}\n              hidden={dates[i].collapsed}\n            /> \n          )\n        }\n      }\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>My Amazing Table!</h1>\n\n        <button onClick={this.sortByDateDescending}>NEW TO OLD</button>\n        <button onClick={this.sortByDateAscending}>OLD TO NEW</button>\n        {/* <button onClick={this.sortByAlphaAscending}>Sort Email A - Z</button> */}\n\n        <table>\n          <thead>\n            <tr>\n              <th id=\"icon-thead\"></th>\n              <th>DATE</th>\n              <th>ID</th>\n              <th>ACCOUNT NAME</th>\n              <th>EMAIL</th>\n              <th>AMOUNT</th>\n            </tr>\n          </thead>\n          <tbody>\n\n            {tableRows}\n\n          </tbody>\n        </table>\n      </div>\n    )   \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/001-add.25e36826.svg\";","module.exports = __webpack_public_path__ + \"static/media/002-minus.7531451f.svg\";"],"sourceRoot":""}